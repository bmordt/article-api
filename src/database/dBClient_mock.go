// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package database

import (
	"github.com/bmordt/article-api/src/models"
	"sync"
	"time"
)

// Ensure, that DBClientMock does implement DBClient.
// If this is not the case, regenerate this file with moq.
var _ DBClient = &DBClientMock{}

// DBClientMock is a mock implementation of DBClient.
//
// 	func TestSomethingThatUsesDBClient(t *testing.T) {
//
// 		// make and configure a mocked DBClient
// 		mockedDBClient := &DBClientMock{
// 			CreateArticleRowFunc: func(title string, body string, date time.Time, tags []string) (int, error) {
// 				panic("mock out the CreateArticleRow method")
// 			},
// 			GetArticleRowByIDFunc: func(findID int) (*models.Article, error) {
// 				panic("mock out the GetArticleRowByID method")
// 			},
// 		}
//
// 		// use mockedDBClient in code that requires DBClient
// 		// and then make assertions.
//
// 	}
type DBClientMock struct {
	// CreateArticleRowFunc mocks the CreateArticleRow method.
	CreateArticleRowFunc func(title string, body string, date time.Time, tags []string) (int, error)

	// GetArticleRowByIDFunc mocks the GetArticleRowByID method.
	GetArticleRowByIDFunc func(findID int) (*models.Article, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateArticleRow holds details about calls to the CreateArticleRow method.
		CreateArticleRow []struct {
			// Title is the title argument value.
			Title string
			// Body is the body argument value.
			Body string
			// Date is the date argument value.
			Date time.Time
			// Tags is the tags argument value.
			Tags []string
		}
		// GetArticleRowByID holds details about calls to the GetArticleRowByID method.
		GetArticleRowByID []struct {
			// FindID is the findID argument value.
			FindID int
		}
	}
	lockCreateArticleRow  sync.RWMutex
	lockGetArticleRowByID sync.RWMutex
}

// CreateArticleRow calls CreateArticleRowFunc.
func (mock *DBClientMock) CreateArticleRow(title string, body string, date time.Time, tags []string) (int, error) {
	if mock.CreateArticleRowFunc == nil {
		panic("DBClientMock.CreateArticleRowFunc: method is nil but DBClient.CreateArticleRow was just called")
	}
	callInfo := struct {
		Title string
		Body  string
		Date  time.Time
		Tags  []string
	}{
		Title: title,
		Body:  body,
		Date:  date,
		Tags:  tags,
	}
	mock.lockCreateArticleRow.Lock()
	mock.calls.CreateArticleRow = append(mock.calls.CreateArticleRow, callInfo)
	mock.lockCreateArticleRow.Unlock()
	return mock.CreateArticleRowFunc(title, body, date, tags)
}

// CreateArticleRowCalls gets all the calls that were made to CreateArticleRow.
// Check the length with:
//     len(mockedDBClient.CreateArticleRowCalls())
func (mock *DBClientMock) CreateArticleRowCalls() []struct {
	Title string
	Body  string
	Date  time.Time
	Tags  []string
} {
	var calls []struct {
		Title string
		Body  string
		Date  time.Time
		Tags  []string
	}
	mock.lockCreateArticleRow.RLock()
	calls = mock.calls.CreateArticleRow
	mock.lockCreateArticleRow.RUnlock()
	return calls
}

// GetArticleRowByID calls GetArticleRowByIDFunc.
func (mock *DBClientMock) GetArticleRowByID(findID int) (*models.Article, error) {
	if mock.GetArticleRowByIDFunc == nil {
		panic("DBClientMock.GetArticleRowByIDFunc: method is nil but DBClient.GetArticleRowByID was just called")
	}
	callInfo := struct {
		FindID int
	}{
		FindID: findID,
	}
	mock.lockGetArticleRowByID.Lock()
	mock.calls.GetArticleRowByID = append(mock.calls.GetArticleRowByID, callInfo)
	mock.lockGetArticleRowByID.Unlock()
	return mock.GetArticleRowByIDFunc(findID)
}

// GetArticleRowByIDCalls gets all the calls that were made to GetArticleRowByID.
// Check the length with:
//     len(mockedDBClient.GetArticleRowByIDCalls())
func (mock *DBClientMock) GetArticleRowByIDCalls() []struct {
	FindID int
} {
	var calls []struct {
		FindID int
	}
	mock.lockGetArticleRowByID.RLock()
	calls = mock.calls.GetArticleRowByID
	mock.lockGetArticleRowByID.RUnlock()
	return calls
}
